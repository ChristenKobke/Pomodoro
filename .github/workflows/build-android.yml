name: Build Android APK (Simple & Robust)
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'debug'
        type: choice
        options:
        - debug
        - release

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      # 2. Debug repository contents
      - name: Debug repository contents
        run: |
          echo "Current working directory: $(pwd)"
          echo "Contents of repository root:"
          ls -la
          echo ""
          echo "Searching for package.json:"
          find . -name "package.json" -type f 2>/dev/null || echo "No package.json found"
          echo ""
          echo "Directory structure:"
          find . -type d -maxdepth 3 | sort
      
      # 3. Setup Node.js without caching to avoid lock file requirement
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # Removed cache to avoid lock file error
      
      # 4. Install project dependencies with maximum redundancy
      - name: Install dependencies
        run: |
          echo "=== DEPENDENCY INSTALLATION WITH FULL REDUNDANCY ==="
          
          # Step 1: Verify we're in the right place
          echo "Current directory: $(pwd)"
          echo "Repository structure:"
          find . -maxdepth 3 -type f -name "*.json" | head -10
          
          # Step 2: Look for package.json in multiple locations
          PACKAGE_JSON_PATH=""
          
          if [ -f "package.json" ]; then
            echo "✅ Found package.json in root"
            PACKAGE_JSON_PATH="."
          elif [ -f "./package.json" ]; then
            echo "✅ Found package.json in ./package.json"
            PACKAGE_JSON_PATH="."
          elif [ -f "frontend/package.json" ]; then
            echo "✅ Found package.json in frontend/"
            PACKAGE_JSON_PATH="frontend"
          elif [ -f "app/package.json" ]; then
            echo "✅ Found package.json in app/"
            PACKAGE_JSON_PATH="app"
          elif [ -f "client/package.json" ]; then
            echo "✅ Found package.json in client/"
            PACKAGE_JSON_PATH="client"
          else
            # Search recursively
            echo "🔍 Searching for package.json recursively..."
            FOUND_PATH=$(find . -name "package.json" -type f | head -1)
            if [ -n "$FOUND_PATH" ]; then
              PACKAGE_JSON_PATH=$(dirname "$FOUND_PATH")
              echo "✅ Found package.json at: $FOUND_PATH"
            else
              echo "❌ No package.json found anywhere!"
              echo "Creating minimal package.json..."
              
              # Create minimal package.json as fallback
              cat > package.json << 'EOF'
          {
            "name": "pomodoro",
            "private": true,
            "version": "0.0.0",
            "type": "module",
            "scripts": {
              "dev": "vite",
              "build": "vite build",
              "preview": "vite preview"
            },
            "dependencies": {
              "@capacitor/android": "^7.4.3",
              "@capacitor/core": "^7.4.3",
              "vue": "^3.5.18"
            },
            "devDependencies": {
              "@capacitor/cli": "^7.4.3",
              "@vitejs/plugin-vue": "^6.0.1",
              "autoprefixer": "^10.4.21",
              "postcss": "^8.5.6",
              "tailwindcss": "^4.1.12",
              "vite": "^7.1.2",
              "vite-plugin-windicss": "^1.9.4",
              "windicss": "^3.5.6"
            }
          }
          EOF
              echo "✅ Created minimal package.json"
              PACKAGE_JSON_PATH="."
            fi
          fi
          
          # Step 3: Move to correct directory and install
          if [ -n "$PACKAGE_JSON_PATH" ] && [ -d "$PACKAGE_JSON_PATH" ]; then
            echo "📁 Changing to directory: $PACKAGE_JSON_PATH"
            cd "$PACKAGE_JSON_PATH"
            
            # Verify package.json is readable
            echo "📄 package.json contents preview:"
            head -10 package.json || echo "Could not read package.json"
            
            # Try multiple installation methods with retries
            echo "🔄 Attempting npm installation (Method 1: npm install)..."
            if npm install --prefer-offline --no-audit; then
              echo "✅ npm install succeeded"
            else
              echo "❌ npm install failed, trying method 2..."
              
              echo "🔄 Attempting npm installation (Method 2: npm install --force)..."
              if npm install --force --prefer-offline --no-audit; then
                echo "✅ npm install --force succeeded"
              else
                echo "❌ npm install --force failed, trying method 3..."
                
                echo "🔄 Attempting npm installation (Method 3: clearing cache)..."
                npm cache clean --force
                if npm install --prefer-offline --no-audit --verbose; then
                  echo "✅ npm install after cache clear succeeded"
                else
                  echo "❌ All npm install methods failed, trying yarn..."
                  
                  echo "🔄 Attempting yarn installation as fallback..."
                  if command -v yarn &> /dev/null; then
                    if yarn install --prefer-offline --silent; then
                      echo "✅ yarn install succeeded"
                    else
                      echo "❌ yarn install also failed"
                      echo "📊 Final diagnostics:"
                      echo "Node version: $(node --version)"
                      echo "NPM version: $(npm --version)"
                      echo "Current directory contents:"
                      ls -la
                      exit 1
                    fi
                  else
                    echo "❌ Yarn not available, installation failed completely"
                    exit 1
                  fi
                fi
              fi
            fi
            
            # Step 4: Verify installation worked
            echo "✅ Dependencies installed successfully"
            echo "📦 node_modules size: $(du -sh node_modules 2>/dev/null || echo 'N/A')"
            
            # Export the working directory for subsequent steps
            echo "PACKAGE_DIR=$PACKAGE_JSON_PATH" >> $GITHUB_ENV
            echo "WORKING_DIR=$(pwd)" >> $GITHUB_ENV
            
          else
            echo "❌ Could not determine package.json location"
            exit 1
          fi
      
      # 5. Run tests (if available)
      - name: Run tests
        run: npm run test --if-present
        continue-on-error: true
        working-directory: ${{ env.WORKING_DIR || '.' }}
      
      # 6. Build the Vue app
      - name: Build Vue app
        run: npm run build
        working-directory: ${{ env.WORKING_DIR || '.' }}
      
      # 7. Verify Vue build
      - name: Verify Vue build output
        run: |
          # Check in current directory first, then in package directory
          if [ -d "dist" ]; then
            echo "✅ Vue build verified - dist size: $(du -sh dist/)"
          elif [ -d "${{ env.WORKING_DIR }}/dist" ]; then
            echo "✅ Vue build verified - dist size: $(du -sh ${{ env.WORKING_DIR }}/dist/)"
          else
            echo "❌ Error: dist directory not found!"
            echo "Current directory contents:"
            ls -la
            echo "Working directory contents:"
            ls -la ${{ env.WORKING_DIR || '.' }}
            echo "Searching for dist directory:"
            find . -name "dist" -type d
            exit 1
          fi
      
      # 8. Setup Java 21 (fixed version)
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: 'gradle'
      
      # 9. Make gradlew executable with redundancy
      - name: Make gradlew executable
        run: |
          echo "=== GRADLE WRAPPER SETUP WITH REDUNDANCY ==="
          
          # Step 1: Check current directory and find gradlew
          echo "Current directory: $(pwd)"
          echo "Looking for gradlew files..."
          
          GRADLEW_PATH=""
          
          # Check multiple possible locations
          if [ -f "./android/gradlew" ]; then
            echo "✅ Found gradlew at ./android/gradlew"
            GRADLEW_PATH="./android/gradlew"
          elif [ -f "android/gradlew" ]; then
            echo "✅ Found gradlew at android/gradlew"
            GRADLEW_PATH="android/gradlew"
          elif [ -f "${{ env.WORKING_DIR }}/android/gradlew" ]; then
            echo "✅ Found gradlew at ${{ env.WORKING_DIR }}/android/gradlew"
            GRADLEW_PATH="${{ env.WORKING_DIR }}/android/gradlew"
          else
            # Search recursively for gradlew
            echo "🔍 Searching for gradlew recursively..."
            FOUND_GRADLEW=$(find . -name "gradlew" -type f | head -1)
            if [ -n "$FOUND_GRADLEW" ]; then
              echo "✅ Found gradlew at: $FOUND_GRADLEW"
              GRADLEW_PATH="$FOUND_GRADLEW"
            else
              echo "❌ gradlew not found anywhere!"
              echo "Available directory structure:"
              find . -type d -name "*android*" | head -5
              echo "Contents of potential android directories:"
              for dir in $(find . -type d -name "*android*" | head -3); do
                echo "Contents of $dir:"
                ls -la "$dir" 2>/dev/null || echo "  Cannot access $dir"
              done
              
              # Check if android directory exists at all
              if [ ! -d "android" ] && [ ! -d "${{ env.WORKING_DIR }}/android" ]; then
                echo "❌ No android directory found!"
                echo "This might mean Capacitor sync failed or android platform was never added"
                echo "Available directories:"
                ls -la
                echo "Trying to add android platform..."
                
                cd ${{ env.WORKING_DIR || '.' }}
                if npx cap add android; then
                  echo "✅ Android platform added successfully"
                  if [ -f "android/gradlew" ]; then
                    GRADLEW_PATH="android/gradlew"
                    echo "✅ gradlew now available at android/gradlew"
                  else
                    echo "❌ gradlew still not found after adding android platform"
                    exit 1
                  fi
                else
                  echo "❌ Failed to add android platform"
                  exit 1
                fi
              else
                echo "❌ Android directory exists but gradlew is missing"
                echo "Contents of android directory:"
                ls -la android/ 2>/dev/null || ls -la ${{ env.WORKING_DIR }}/android/ 2>/dev/null || echo "Cannot access android directory"
                
                # Try to regenerate gradlew
                echo "🔧 Attempting to regenerate Gradle wrapper..."
                cd android 2>/dev/null || cd ${{ env.WORKING_DIR }}/android 2>/dev/null || exit 1
                
                # Check if we have gradle
                if command -v gradle &> /dev/null; then
                  echo "Found gradle, generating wrapper..."
                  gradle wrapper --gradle-version=8.0
                  if [ -f "gradlew" ]; then
                    echo "✅ Successfully generated gradlew"
                    GRADLEW_PATH="./gradlew"
                  fi
                else
                  echo "❌ Gradle not available to generate wrapper"
                  exit 1
                fi
              fi
            fi
          fi
          
          # Step 2: Make gradlew executable if found
          if [ -n "$GRADLEW_PATH" ] && [ -f "$GRADLEW_PATH" ]; then
            echo "📝 Making $GRADLEW_PATH executable..."
            chmod +x "$GRADLEW_PATH"
            
            # Verify it's executable
            if [ -x "$GRADLEW_PATH" ]; then
              echo "✅ gradlew is now executable"
              echo "Gradle wrapper info:"
              "$GRADLEW_PATH" --version || echo "Could not get gradle version"
            else
              echo "❌ Failed to make gradlew executable"
              exit 1
            fi
            
            # Export the path for later steps
            echo "GRADLEW_PATH=$GRADLEW_PATH" >> $GITHUB_ENV
          else
            echo "❌ Could not locate or create gradlew"
            exit 1
          fi
      
      # 10. Sync Capacitor Android with TypeScript handling
      - name: Sync Capacitor Android
        run: |
          echo "Syncing Capacitor Android platform..."
          
          # Try from working directory first
          cd ${{ env.WORKING_DIR || '.' }}
          
          # Check if capacitor is installed and configured
          if [ -f "capacitor.config.ts" ] || [ -f "capacitor.config.js" ] || [ -f "capacitor.config.json" ]; then
            echo "✅ Capacitor config found"
            
            # Check if we have a .ts config file and need TypeScript
            if [ -f "capacitor.config.ts" ]; then
              echo "📝 TypeScript config detected, checking TypeScript installation..."
              if ! npm list typescript &>/dev/null && ! npm list -g typescript &>/dev/null; then
                echo "⚠️  TypeScript not found, installing..."
                npm install -D typescript
                echo "✅ TypeScript installed"
              else
                echo "✅ TypeScript already available"
              fi
            fi
          else
            echo "⚠️  No capacitor config found, checking if @capacitor/cli is available..."
            if ! command -v cap &> /dev/null && ! npx cap --version &> /dev/null; then
              echo "❌ Capacitor CLI not found, installing..."
              npm install @capacitor/cli --save-dev
            fi
          fi
          
          # Sync with multiple fallback attempts
          echo "🔄 Attempting Capacitor sync..."
          if npx cap sync android --verbose; then
            echo "✅ Capacitor sync completed successfully"
          elif npx cap sync android; then
            echo "✅ Capacitor sync completed (without verbose)"
          else
            echo "❌ Capacitor sync failed with TypeScript config, trying JavaScript config fallback..."
            
            # If TypeScript config is causing issues, try creating a JS version
            if [ -f "capacitor.config.ts" ] && [ ! -f "capacitor.config.js" ]; then
              echo "🔧 Creating JavaScript config fallback..."
              
              # Extract basic config and create JS version
              cat > capacitor.config.js << 'EOF'
import { CapacitorConfig } from '@capacitor/cli';

const config = {
  appId: 'com.pomodoro.app',
  appName: 'Pomodoro',
  webDir: 'dist',
  bundledWebRuntime: false
};

export default config;
EOF
              echo "✅ JavaScript config created"
              
              # Try sync again with JS config
              if npx cap sync android; then
                echo "✅ Capacitor sync completed with JavaScript config"
              else
                echo "❌ Sync still failing, trying to add platform manually..."
                if [ ! -d "android" ]; then
                  echo "🔧 Android platform not found, adding it..."
                  npx cap add android || echo "Failed to add android platform"
                fi
                
                # Final sync attempt
                if npx cap sync android; then
                  echo "✅ Capacitor sync completed after platform add"
                else
                  echo "❌ All Capacitor sync attempts failed"
                  echo "Trying alternative approach - copy dist manually..."
                  
                  # Manual copy as last resort
                  if [ -d "dist" ] && [ -d "android/app/src/main" ]; then
                    rm -rf android/app/src/main/assets/public
                    mkdir -p android/app/src/main/assets
                    cp -r dist android/app/src/main/assets/public
                    echo "✅ Manually copied web assets to Android"
                  else
                    echo "❌ Manual copy also failed - missing dist or android structure"
                    echo "Project structure:"
                    ls -la
                    echo "Android structure:"
                    find android -type d -maxdepth 3 2>/dev/null || echo "No android directory accessible"
                    exit 1
                  fi
                fi
              fi
            else
              echo "❌ Capacitor sync failed completely"
              echo "Available Capacitor commands:"
              npx cap --help || echo "Cap CLI not responding"
              
              # Try initializing if needed
              if [ ! -d "android" ]; then
                echo "🔧 Android platform not found, adding it..."
                npx cap add android || echo "Failed to add android platform"
              fi
              
              # Try sync again
              if npx cap sync android; then
                echo "✅ Capacitor sync completed after platform add"
              else
                echo "❌ Final sync attempt failed"
                exit 1
              fi
            fi
          fi
      
      # 11. Verify Android setup and fix Gradle configuration
      - name: Verify Android project
        run: |
          echo "=== ANDROID PROJECT VERIFICATION AND FIXES ==="
          
          # Check if android directory exists
          if [ -d "android" ]; then
            echo "✅ Android directory found"
            cd android
            
            # Check for required Gradle files
            echo "🔍 Checking Gradle configuration files..."
            
            # List current files
            echo "Current android directory contents:"
            ls -la
            
            # Check if capacitor.settings.gradle exists
            if [ ! -f "capacitor.settings.gradle" ]; then
              echo "❌ capacitor.settings.gradle missing - creating it..."
              
              # Create basic capacitor.settings.gradle
              cat > capacitor.settings.gradle << 'EOF'
// Capacitor Android Settings
// This file is automatically generated by Capacitor
// Do not edit this file directly

rootProject.name = 'app'
EOF
              echo "✅ Created capacitor.settings.gradle"
            else
              echo "✅ capacitor.settings.gradle exists"
            fi
            
            # Check settings.gradle and fix if needed
            if [ -f "settings.gradle" ]; then
              echo "📝 Checking settings.gradle..."
              cat settings.gradle
              
              # Check if it's trying to apply missing capacitor.settings.gradle
              if grep -q "capacitor.settings.gradle" settings.gradle; then
                echo "🔧 Found capacitor.settings.gradle reference in settings.gradle"
                if [ ! -f "capacitor.settings.gradle" ]; then
                  echo "❌ Referenced file doesn't exist, fixing settings.gradle..."
                  
                  # Create a corrected settings.gradle
                  cat > settings.gradle << 'EOF'
include ':app'
include ':capacitor-android'
project(':capacitor-android').projectDir = new File('../node_modules/@capacitor/android/capacitor')

include ':capacitor-app'
project(':capacitor-app').projectDir = new File('../node_modules/@capacitor/app/android')

include ':capacitor-core'
project(':capacitor-core').projectDir = new File('../node_modules/@capacitor/core/android')
EOF
                  echo "✅ Fixed settings.gradle"
                fi
              fi
            else
              echo "❌ settings.gradle missing - creating it..."
              cat > settings.gradle << 'EOF'
include ':app'
rootProject.name = 'pomodoro'
EOF
              echo "✅ Created settings.gradle"
            fi
            
            # Check for app directory and build.gradle
            if [ ! -d "app" ]; then
              echo "❌ app directory missing - this indicates a serious Capacitor sync issue"
              cd ..
              echo "🔧 Attempting to regenerate Android platform..."
              
              # Remove broken android directory and regenerate
              rm -rf android
              if npx cap add android; then
                echo "✅ Android platform regenerated"
                cd android
              else
                echo "❌ Failed to regenerate Android platform"
                exit 1
              fi
            fi
            
            # Verify final state
            echo "📊 Final Android project verification:"
            ls -la
            
            if [ -f "app/build.gradle" ]; then
              echo "✅ app/build.gradle exists"
            else
              echo "❌ app/build.gradle still missing"
              exit 1
            fi
            
            if [ -d "app/src/main/assets/public" ]; then
              echo "✅ Web assets synced to Android"
            elif [ -d "app/src/main/assets" ]; then
              echo "⚠️ Assets directory exists but no public folder - checking sync..."
              if [ -d "../dist" ]; then
                echo "🔧 Manually copying web assets..."
                cp -r ../dist app/src/main/assets/public
                echo "✅ Web assets manually copied"
              else
                echo "❌ No dist directory found for assets"
                exit 1
              fi
            else
              echo "❌ No assets directory found"
              exit 1
            fi
            
            echo "✅ Android project verification completed"
            
          else
            echo "❌ Android directory not found!"
            echo "Available directories:"
            ls -la
            exit 1
          fi
      
      # 12. Build Android APK with dynamic gradlew path
      - name: Build Android APK
        run: |
          echo "=== ANDROID APK BUILD WITH REDUNDANCY ==="
          
          # Determine build type
          BUILD_TYPE="${{ github.event.inputs.build_type || 'debug' }}"
          echo "🔨 Building $BUILD_TYPE APK..."
          
          # Determine working directory for build
          BUILD_DIR=""
          GRADLEW_CMD=""
          
          # Find the correct build directory and gradlew command
          if [ -f "${{ env.GRADLEW_PATH }}" ]; then
            GRADLEW_CMD="${{ env.GRADLEW_PATH }}"
            # Extract directory from gradlew path
            BUILD_DIR=$(dirname "${{ env.GRADLEW_PATH }}")
            echo "Using gradlew: $GRADLEW_CMD"
            echo "Build directory: $BUILD_DIR"
          else
            echo "❌ GRADLEW_PATH environment variable not set or file not found"
            exit 1
          fi
          
          # Change to build directory
          if [ "$BUILD_DIR" != "." ] && [ -d "$BUILD_DIR" ]; then
            cd "$BUILD_DIR"
            GRADLEW_CMD="./gradlew"
          fi
          
          # Verify we're in the right place
          echo "Current directory for build: $(pwd)"
          echo "Contents:"
          ls -la
          
          # Build based on type
          if [ "$BUILD_TYPE" = "release" ]; then
            echo "🔨 Building RELEASE APK..."
            if $GRADLEW_CMD assembleRelease --no-daemon --stacktrace; then
              APK_PATH="app/build/outputs/apk/release/app-release-unsigned.apk"
            else
              echo "❌ Release build failed, trying with different flags..."
              $GRADLEW_CMD assembleRelease --no-daemon --info || exit 1
              APK_PATH="app/build/outputs/apk/release/app-release-unsigned.apk"
            fi
          else
            echo "🔨 Building DEBUG APK..."
            if $GRADLEW_CMD assembleDebug --no-daemon --stacktrace; then
              APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
            else
              echo "❌ Debug build failed, trying with different flags..."
              $GRADLEW_CMD assembleDebug --no-daemon --info || exit 1
              APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
            fi
          fi
          
          # Verify APK was created with multiple fallback searches
          if [ -f "$APK_PATH" ]; then
            echo "✅ APK built successfully: $APK_PATH"
          else
            echo "❌ APK not found at expected path: $APK_PATH"
            echo "🔍 Searching for any APK files..."
            
            # Search in multiple locations
            FOUND_APKS=$(find . -name "*.apk" -type f 2>/dev/null)
            if [ -n "$FOUND_APKS" ]; then
              echo "Found APK files:"
              echo "$FOUND_APKS"
              # Use the first APK found
              APK_PATH=$(echo "$FOUND_APKS" | head -1)
              echo "Using APK: $APK_PATH"
            else
              echo "No APK files found anywhere!"
              echo "Build output structure:"
              find . -name "outputs" -type d -exec ls -la {} \; 2>/dev/null || echo "No outputs directory found"
              exit 1
            fi
          fi
          
          echo "✅ APK built successfully: $APK_PATH"
          echo "APK size: $(du -h "$APK_PATH" | cut -f1)"
          
          # Convert relative path to absolute for artifact upload
          FULL_APK_PATH="$(pwd)/$APK_PATH"
          
          # Export for next steps
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          echo "FULL_APK_PATH=$FULL_APK_PATH" >> $GITHUB_ENV
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
      
      # 13. Upload APK artifact with dynamic path
      - name: Upload APK
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: pomodoro-app-${{ env.BUILD_TYPE }}-${{ github.run_number }}
          path: ${{ env.FULL_APK_PATH }}
          retention-days: 30
      
      # 14. Create build summary
      - name: Build summary
        if: success()
        run: |
          echo "## 📱 Android Build Completed!" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Path**: ${{ env.APK_PATH }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Name**: pomodoro-app-${{ env.BUILD_TYPE }}-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Download**: [Build Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
      
      # 15. Comment on commit (push events only)
      - name: Add commit comment
        if: success() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `## 📱 Android APK Built Successfully!
              
              **Build Details:**
              - Build Type: \`${{ env.BUILD_TYPE }}\`
              - Artifact: \`pomodoro-app-${{ env.BUILD_TYPE }}-${{ github.run_number }}\`
              
              **📥 Download APK:**
              [Download from Actions](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              *Built from: ${{ github.sha }}*`
            });
      
      # 16. Create GitHub release (for version tags) with dynamic path
      - name: Create Release
        if: success() && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.FULL_APK_PATH }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 📱 Pomodoro App ${{ github.ref_name }}
            
            ### Download
            - **Android APK**: Download the APK file below
            
            ### Build Info
            - Build Type: ${{ env.BUILD_TYPE }}
            - Java: 21
            - Node.js: 20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
