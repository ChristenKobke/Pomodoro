name: Build Android APK (Automatic)
on:
  push:
    branches: [ main ]
  workflow_dispatch: # allows manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Prevent hanging builds
    
    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4 # Updated to latest
        with:
          fetch-depth: 1 # Shallow clone for speed
      
      # 2. Setup Node.js with caching
      - name: Setup Node.js
        uses: actions/setup-node@v4 # Updated to latest
        with:
          node-version: 20
          cache: 'npm' # Cache npm dependencies
      
      # 3. Install dependencies
      - name: Install npm dependencies
        run: npm ci --prefer-offline --no-audit
      
      # 4. Build Vue app
      - name: Build Vue app
        run: npm run build
        
      # 5. Verify build output
      - name: Verify Vue build output
        run: |
          echo "Checking if dist directory exists..."
          ls -la dist/
          echo "Build output verified!"
      
      # 6. Setup Java for Android (FIXED: Use Java 21)
      - name: Setup Java
        uses: actions/setup-java@v4 # Updated to latest
        with:
          distribution: temurin
          java-version: 21 # Changed from 17 to 21
          cache: 'gradle' # Cache Gradle dependencies
      
      # 7. Ensure Gradle wrapper is executable
      - name: Make Gradle wrapper executable
        run: chmod +x ./android/gradlew
      
      # 8. Sync Capacitor Android with verbose output
      - name: Sync Capacitor Android
        run: |
          echo "Syncing Capacitor Android platform..."
          npx cap sync android --verbose
          echo "Capacitor sync completed!"
      
      # 9. Verify Android project structure
      - name: Verify Android project
        run: |
          echo "Checking Android project structure..."
          ls -la android/
          ls -la android/app/
          echo "Android project structure verified!"
      
      # 10. Build Debug APK with better error handling
      - name: Build Android Debug APK
        run: |
          echo "Starting Android APK build..."
          ./gradlew assembleDebug --no-daemon --stacktrace --info
          echo "APK build completed!"
        working-directory: android
      
      # 11. Verify APK was created
      - name: Verify APK creation
        run: |
          echo "Checking if APK was created..."
          ls -la android/app/build/outputs/apk/debug/
          if [ -f android/app/build/outputs/apk/debug/app-debug.apk ]; then
            echo "‚úÖ APK found!"
            echo "APK size: $(du -h android/app/build/outputs/apk/debug/app-debug.apk)"
          else
            echo "‚ùå APK not found!"
            echo "Available files in debug directory:"
            find android/app/build/outputs -name "*.apk" -type f
            exit 1
          fi
      
      # 12. Upload APK artifact with better naming
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        if: success() # Only upload if build succeeded
        with:
          name: notes-app-debug-${{ github.run_number }}
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 7 # Keep for 7 days
          
      # 13. Optional: Comment on commit with download link
      - name: Comment APK Info
        if: success() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: 'üì± Android APK built successfully! Download it from the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).'
            })

  # Optional: Add a separate job to create releases on tags
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: notes-app-debug-${{ github.run_number }}
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: app-debug.apk
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
